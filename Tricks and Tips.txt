Good Practices

1. Using Global variables and constantly trying to manipulate it by passing it to a function as an argument is a better way of using variables.
Otherwise the problem of mutability of variables arise. Look at point number 13 in Tricks.




Tricks

1. // operator is used for integral division i.e. the result will omit the floating values.

2. Doc-String is a comment that describes the use of a particular piece or part of a program.
  eg. def function_name(arguments) :
          """
          This comment is a docstring, and it should describe what this function does.
          """
          help(function_name)
   When we use help() over some function, it displays what that function does. But essentially what is happening is, the help function 
   displays the doc-string of the function.
   
3. Tags are variable that are common to all the objects of a class i.e. variables whose values are same for all the objects unless you change it.
 Tags are used to count the number of objects created for a class.
  eg. class class_name:
        tag=0
          def __init__(self):
              tag+=1
      
      print(class_name.tag)     
    The above program can count the number of objects for a class created and will display it.
    
4. dir(object_name) is used over objects to return a list of all the functions and variable associated with that object.

5. \ is used to represent the continuation of a statement in python.

6. Function with names like __name__() are special built-in functions.

7. A single underscore is added before the name of a function to make it private.
 eg. _func() is a private function.

8. if __name__=='main' :
      #whole program here
      
      The above code before any program is used for security i.e. it doesn't allow import modules from this program. 
      A built-in variable __name__ stores the name of the file as main. If the someother file is runnig, it becomes main and this file becomes sub.
      So the name is not main and the above code will not be executed.

9. _ is used to store the last value that was used without assigning a variable in python shell.

10. print ("Time now at greenwich meridian is : ", end = "")
  The end=' ' is just to say that you want a space after the end of the statement instead of a new line character. In Python 2.x you would have to do this by placing a comma at the end of the print statement. The end parameter means that the line gets ' ' at the end rather than a newline character.
  
11. We can open any kind of file through python provided that we have an default application installed in our os to open such files.
 code:  import os
        os.system("start filepath/filename.extension")
        
    Save and run the above code to open the file.
    
12. string.ascii_letters    
The above line returns a list of all the small and capital alphabets.

13. x = [1]
    def test():
      x=[2]
      print(x)   #Prints [2] because x is a new local variable in the test function.
    print(x)  #Prints [1], the global variable.
    
    x = [1]
    def test():
      x[1]= 3
      print(x)   #Prints [1,3] because x is not a new local variable defined in the test function rather it is the same global variable.
    print(x)  #Prints [1,3], the global variable.



